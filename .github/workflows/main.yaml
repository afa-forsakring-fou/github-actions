on:
  workflow_call:
    inputs:
      FRAMEWORK:
        required: true
        type: string
      NODE_VERSION:
        required: false
        type: string
        default: "20.13.1"
      MATRIX:
        required: false
        type: string
        default: "1"
      COREPACK_ENABLE:
        description: "Force run 'corepack enable' in setup-node"
        required: false
        type: boolean
        default: false

name: Main Workflow

jobs:
  setup-matrix: # Setup matrix by input, for example: MATRIX=3 -> [1,2,3] and is used by matrix strategy in next job
    runs-on: ubuntu-latest
    timeout-minutes: 15

    outputs:
      matrix: ${{ steps.setmatrix.outputs.matrix }}
    steps:
      - name: Set Dynamic Matrix
        id: setmatrix
        run: |
          start="[" && ending="]"
          for ((i = 1 ; i <= $RUNS ; i++)); do start+=${i}; if [ $i -ne $RUNS ]; then start+=","; fi; done;
          start+=$ending && echo "matrix=$start" >> $GITHUB_OUTPUT
        env:
          RUNS: ${{ inputs.MATRIX }}

  build-and-test:
    needs: setup-matrix
    name: Build and test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    strategy:
      matrix:
        containers: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Checkout composite actions
        uses: actions/checkout@v4
        with:
          repository: afa-forsakring-fou/github-actions
          path: composite-actions
          ref: hjalun/code-scan

      - name: Check for gha-creds in .gitignore
        uses: ./composite-actions/.github/workflows/actions/gitignore-check

      - name: Check for submodule and 'skip actions'
        uses: ./composite-actions/.github/workflows/actions/submodule-check

      - name: Get env variables
        run: |
          export node_version="$(node --version)"
          export yarn_version="$(yarn --version)"
          export dotnet_version="$(dotnet --version)"
          export versions="Node version: ${node_version} \nYarn version: ${yarn_version} \nDotnet version: ${dotnet_version}"
          echo "VERSIONS=$versions" >> $GITHUB_ENV
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}

      - name: Print env variables
        uses: ./composite-actions/.github/workflows/actions/echo-step
        with:
          PRINT: ${{ env.VERSIONS }}

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v2
        with:
          version: 499.0.0
          install_components: "local-extract"

      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Set up GKE + Docker
        run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

      - name: Container Scan
        id: scan
        run: bash ./scanimages.sh
        working-directory: ${{ github.workspace }}/composite-actions

      # - name: Set the value
      #   id: step_one
      #   run: |
      #     echo "FOO=$(git status)" >> $GITHUB_OUTPUT

      # - name: Use the value
      #   id: step_two
      #   run: |
      #     echo "${{ steps.step_one.outputs.FOO }}"

      - name: Use the value
        id: step_three
        run: |
          echo "${{ steps.scan.outputs.scanResults }}"

      - name: Use the value
        id: step_three
        working-directory: ${{ github.workspace }}/composite-actions
        run: |
          cat scanResults

      - name: Hello world
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ Thanks for reporting! ${{ steps.vars.outputs.pr_title }}' ${{ steps.vars.outputs.pr_title }}
            })

      - name: React steps
        if: "${{ inputs.FRAMEWORK == 'react' }}"
        uses: ./composite-actions/.github/workflows/actions/react
        with:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
          NODE_VERSION: ${{ inputs.NODE_VERSION }}
          X_HASURA_ADMIN_SECRET: ${{ secrets.X_HASURA_ADMIN_SECRET }}
          HASURA_URL: ${{ secrets.HASURA_URL }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          MAIL: ${{ secrets.MAIL }}
          MATRIX: ${{ inputs.MATRIX }}
          COREPACK_ENABLE: ${{ inputs.COREPACK_ENABLE }}

      - name: Dotnet steps
        if: "${{ inputs.FRAMEWORK == 'dotnet' }}"
        uses: ./composite-actions/.github/workflows/actions/dotnet
        with:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
          AZD_NUGET_FEED_TOKEN: ${{ secrets.AZD_NUGET_FEED_TOKEN }}

      - name: Dotnet steps
        if: "${{ inputs.FRAMEWORK == 'dotnet' }}"
        uses: ./composite-actions/.github/workflows/actions/dotnet
        with:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
          AZD_NUGET_FEED_TOKEN: ${{ secrets.AZD_NUGET_FEED_TOKEN }}

  build-to-gke:
    name: Build and Deploy to GKE
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-and-test
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Config git
        run: |
          git config --global user.name 'Github Actions'
          git config --global user.email ''${{ secrets.MAIL }}''

      # fou-web has three cache steps here

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v2
        with:
          version: 407.0.0

      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Set up GKE + Docker
        run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

      # Set up kustomize (will kustomize change from /master/ to /main/ soon?)
      - name: Set up Kustomize
        run: |-
          cd /usr/bin
          curl -s "https://raw.githubusercontent.com/\
          kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | sudo bash

      # Build the Docker image, Publish it to the image repository, Commit the new tag reference, Push those commits
      - name: Build
        run: |
          make env deploy_ci
        env:
          GIT_TOKEN: ${{secrets.GIT_TOKEN}}
          GIT_USER: "GithubActions"
          AZD_NUGET_FEED_TOKEN: ${{ secrets.AZD_NUGET_FEED_TOKEN }}
          X_HASURA_ADMIN_SECRET: ${{ secrets.X_HASURA_ADMIN_SECRET }}
